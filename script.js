class SearchableSelect{constructor(container,options={}){this.container=container;this.options=options;this.placeholder=options.placeholder||"请选择";this.searchPlaceholder=options.searchPlaceholder||"搜索...";this.data=[];this.filteredData=[];this.selectedValue="";this.isOpen=false;this.onChangeCallback=options.onChange||(()=>{});this.init()}init(){this.createHTML();this.bindEvents()}createHTML(){this.container.innerHTML=`
            <div class="searchable-select">
                <div class="select-display" tabindex="0">
                    <span class="select-text">${this.placeholder}</span>
                    <span class="select-arrow">▼</span>
                </div>
                <div class="select-dropdown" style="display: none;">
                    <input type="text" class="search-input" placeholder="${this.searchPlaceholder}">
                    <div class="options-container"></div>
                </div>
            </div>
        `;this.display=this.container.querySelector(".select-display");this.text=this.container.querySelector(".select-text");this.arrow=this.container.querySelector(".select-arrow");this.dropdown=this.container.querySelector(".select-dropdown");this.searchInput=this.container.querySelector(".search-input");this.optionsContainer=this.container.querySelector(".options-container")}bindEvents(){this.display.addEventListener("click",e=>{e.stopPropagation();this.toggle()});this.searchInput.addEventListener("input",e=>{this.filterOptions(e.target.value)});this.dropdown.addEventListener("click",e=>{e.stopPropagation()});document.addEventListener("click",()=>{this.close()});this.display.addEventListener("keydown",e=>{if(e.key==="Enter"||e.key===" "){e.preventDefault();this.toggle()}})}setData(data){this.data=data;this.filteredData=[...data];this.renderOptions()}filterOptions(searchTerm){const term=searchTerm.toLowerCase();this.filteredData=this.data.filter(item=>{const text=item.text.toLowerCase();const value=item.value.toLowerCase();return text.includes(term)||value.includes(term)});this.renderOptions()}renderOptions(){this.optionsContainer.innerHTML="";if(this.filteredData.length===0){const noResults=document.createElement("div");noResults.className="option-item no-results";noResults.textContent="无匹配结果";this.optionsContainer.appendChild(noResults);return}this.filteredData.forEach(item=>{const option=document.createElement("div");option.className="option-item";option.textContent=item.text;option.dataset.value=item.value;if(item.value===this.selectedValue){option.classList.add("selected")}option.addEventListener("click",()=>{this.selectOption(item.value,item.text)});this.optionsContainer.appendChild(option)})}selectOption(value,text){this.selectedValue=value;this.text.textContent=text||this.placeholder;this.close();this.onChangeCallback(value,text)}getValue(){return this.selectedValue}setValue(value){const item=this.data.find(item=>item.value===value);if(item){this.selectOption(item.value,item.text)}else{this.selectedValue="";this.text.textContent=this.placeholder}}open(){if(this.isOpen)return;this.isOpen=true;this.dropdown.style.display="block";this.arrow.style.transform="rotate(180deg)";this.searchInput.value="";this.filteredData=[...this.data];this.renderOptions();setTimeout(()=>{this.searchInput.focus()},0)}close(){if(!this.isOpen)return;this.isOpen=false;this.dropdown.style.display="none";this.arrow.style.transform="rotate(0deg)"}toggle(){if(this.isOpen){this.close()}else{this.open()}}}class EnhancementSimulator{constructor(){this.marketData=null;this.selectedItem=null;this.selectedLevel=null;this.recipes={};this.materials=[];this.itemTranslations=this.initTranslations();this.currentCategory="all";this.itemCategories=this.initItemCategories();this.targetItemSelect=null;this.protectionItemSelect=null;this.recipeSelect=null;this.customPriceConfigs={};this.currentCustomPrices={};this.savedTargetItem=null;this.savedProtectionItem=null;this.currentRankingData=null;this.init()}initTranslations(){return{"/items/coin":"金币","/items/task_token":"任务代币","/items/chimerical_token":"奇幻代币","/items/sinister_token":"阴森代币","/items/enchanted_token":"秘法代币","/items/pirate_token":"海盗代币","/items/cowbell":"牛铃","/items/bag_of_10_cowbells":"牛铃袋 (10个)","/items/purples_gift":"小紫牛的礼物","/items/small_meteorite_cache":"小陨石舱","/items/medium_meteorite_cache":"中陨石舱","/items/large_meteorite_cache":"大陨石舱","/items/small_artisans_crate":"小工匠匣","/items/medium_artisans_crate":"中工匠匣","/items/large_artisans_crate":"大工匠匣","/items/small_treasure_chest":"小宝箱","/items/medium_treasure_chest":"中宝箱","/items/large_treasure_chest":"大宝箱","/items/chimerical_chest":"奇幻宝箱","/items/sinister_chest":"阴森宝箱","/items/enchanted_chest":"秘法宝箱","/items/pirate_chest":"海盗宝箱","/items/blue_key_fragment":"蓝色钥匙碎片","/items/green_key_fragment":"绿色钥匙碎片","/items/purple_key_fragment":"紫色钥匙碎片","/items/white_key_fragment":"白色钥匙碎片","/items/orange_key_fragment":"橙色钥匙碎片","/items/brown_key_fragment":"棕色钥匙碎片","/items/stone_key_fragment":"石头钥匙碎片","/items/dark_key_fragment":"黑暗钥匙碎片","/items/burning_key_fragment":"燃烧钥匙碎片","/items/chimerical_entry_key":"奇幻钥匙","/items/chimerical_chest_key":"奇幻宝箱钥匙","/items/sinister_entry_key":"阴森钥匙","/items/sinister_chest_key":"阴森宝箱钥匙","/items/enchanted_entry_key":"秘法钥匙","/items/enchanted_chest_key":"秘法宝箱钥匙","/items/pirate_entry_key":"海盗钥匙","/items/pirate_chest_key":"海盗宝箱钥匙","/items/donut":"甜甜圈","/items/blueberry_donut":"蓝莓甜甜圈","/items/blackberry_donut":"黑莓甜甜圈","/items/strawberry_donut":"草莓甜甜圈","/items/mooberry_donut":"哞莓甜甜圈","/items/marsberry_donut":"火星莓甜甜圈","/items/spaceberry_donut":"太空莓甜甜圈","/items/cupcake":"纸杯蛋糕","/items/blueberry_cake":"蓝莓蛋糕","/items/blackberry_cake":"黑莓蛋糕","/items/strawberry_cake":"草莓蛋糕","/items/mooberry_cake":"哞莓蛋糕","/items/marsberry_cake":"火星莓蛋糕","/items/spaceberry_cake":"太空莓蛋糕","/items/gummy":"软糖","/items/apple_gummy":"苹果软糖","/items/orange_gummy":"橙子软糖","/items/plum_gummy":"李子软糖","/items/peach_gummy":"桃子软糖","/items/dragon_fruit_gummy":"火龙果软糖","/items/star_fruit_gummy":"杨桃软糖","/items/yogurt":"酸奶","/items/apple_yogurt":"苹果酸奶","/items/orange_yogurt":"橙子酸奶","/items/plum_yogurt":"李子酸奶","/items/peach_yogurt":"桃子酸奶","/items/dragon_fruit_yogurt":"火龙果酸奶","/items/star_fruit_yogurt":"杨桃酸奶","/items/milking_tea":"挤奶茶","/items/foraging_tea":"采摘茶","/items/woodcutting_tea":"伐木茶","/items/cooking_tea":"烹饪茶","/items/brewing_tea":"冲泡茶","/items/alchemy_tea":"炼金茶","/items/enhancing_tea":"强化茶","/items/cheesesmithing_tea":"奶酪锻造茶","/items/crafting_tea":"制作茶","/items/tailoring_tea":"缝纫茶","/items/super_milking_tea":"超级挤奶茶","/items/super_foraging_tea":"超级采摘茶","/items/super_woodcutting_tea":"超级伐木茶","/items/super_cooking_tea":"超级烹饪茶","/items/super_brewing_tea":"超级冲泡茶","/items/super_alchemy_tea":"超级炼金茶","/items/super_enhancing_tea":"超级强化茶","/items/super_cheesesmithing_tea":"超级奶酪锻造茶","/items/super_crafting_tea":"超级制作茶","/items/super_tailoring_tea":"超级缝纫茶","/items/ultra_milking_tea":"究极挤奶茶","/items/ultra_foraging_tea":"究极采摘茶","/items/ultra_woodcutting_tea":"究极伐木茶","/items/ultra_cooking_tea":"究极烹饪茶","/items/ultra_brewing_tea":"究极冲泡茶","/items/ultra_alchemy_tea":"究极炼金茶","/items/ultra_enhancing_tea":"究极强化茶","/items/ultra_cheesesmithing_tea":"究极奶酪锻造茶","/items/ultra_crafting_tea":"究极制作茶","/items/ultra_tailoring_tea":"究极缝纫茶","/items/gathering_tea":"采集茶","/items/gourmet_tea":"美食茶","/items/wisdom_tea":"经验茶","/items/processing_tea":"加工茶","/items/efficiency_tea":"效率茶","/items/artisan_tea":"工匠茶","/items/catalytic_tea":"催化茶","/items/blessed_tea":"福气茶","/items/stamina_coffee":"耐力咖啡","/items/intelligence_coffee":"智力咖啡","/items/defense_coffee":"防御咖啡","/items/attack_coffee":"攻击咖啡","/items/power_coffee":"力量咖啡","/items/ranged_coffee":"远程咖啡","/items/magic_coffee":"魔法咖啡","/items/super_stamina_coffee":"超级耐力咖啡","/items/super_intelligence_coffee":"超级智力咖啡","/items/super_defense_coffee":"超级防御咖啡","/items/super_attack_coffee":"超级攻击咖啡","/items/super_power_coffee":"超级力量咖啡","/items/super_ranged_coffee":"超级远程咖啡","/items/super_magic_coffee":"超级魔法咖啡","/items/ultra_stamina_coffee":"究极耐力咖啡","/items/ultra_intelligence_coffee":"究极智力咖啡","/items/ultra_defense_coffee":"究极防御咖啡","/items/ultra_attack_coffee":"究极攻击咖啡","/items/ultra_power_coffee":"究极力量咖啡","/items/ultra_ranged_coffee":"究极远程咖啡","/items/ultra_magic_coffee":"究极魔法咖啡","/items/wisdom_coffee":"经验咖啡","/items/lucky_coffee":"幸运咖啡","/items/swiftness_coffee":"迅捷咖啡","/items/channeling_coffee":"吟唱咖啡","/items/critical_coffee":"暴击咖啡","/items/poke":"破胆之刺","/items/impale":"透骨之刺","/items/puncture":"破甲之刺","/items/penetrating_strike":"贯心之刺","/items/scratch":"爪影斩","/items/cleave":"分裂斩","/items/maim":"血刃斩","/items/crippling_slash":"致残斩","/items/smack":"重磕","/items/sweep":"重扫","/items/stunning_blow":"重锤","/items/fracturing_impact":"碎裂冲击","/items/shield_bash":"盾击","/items/quick_shot":"快速射击","/items/aqua_arrow":"流水箭","/items/flame_arrow":"烈焰箭","/items/rain_of_arrows":"箭雨","/items/silencing_shot":"沉默之箭","/items/steady_shot":"稳定射击","/items/pestilent_shot":"疫病射击","/items/penetrating_shot":"贯穿射击","/items/water_strike":"流水冲击","/items/ice_spear":"冰枪术","/items/frost_surge":"冰霜爆裂","/items/mana_spring":"法力喷泉","/items/entangle":"缠绕","/items/toxic_pollen":"剧毒粉尘","/items/natures_veil":"自然菌幕","/items/life_drain":"生命吸取","/items/fireball":"火球","/items/flame_blast":"熔岩爆裂","/items/firestorm":"火焰风暴","/items/smoke_burst":"烟爆灭影","/items/minor_heal":"初级自愈术","/items/heal":"自愈术","/items/quick_aid":"快速治疗术","/items/rejuvenate":"群体治疗术","/items/taunt":"嘲讽","/items/provoke":"挑衅","/items/toughness":"坚韧","/items/elusiveness":"闪避","/items/precision":"精确","/items/berserk":"狂暴","/items/elemental_affinity":"元素增幅","/items/frenzy":"狂速","/items/spike_shell":"尖刺防护","/items/arcane_reflection":"奥术反射","/items/vampirism":"吸血","/items/revive":"复活","/items/insanity":"疯狂","/items/invincible":"无敌","/items/fierce_aura":"物理光环","/items/aqua_aura":"流水光环","/items/sylvan_aura":"自然光环","/items/flame_aura":"火焰光环","/items/speed_aura":"速度光环","/items/critical_aura":"暴击光环","/items/gobo_stabber":"哥布林长剑","/items/gobo_slasher":"哥布林关刀","/items/gobo_smasher":"哥布林狼牙棒","/items/spiked_bulwark":"尖刺重盾","/items/werewolf_slasher":"狼人关刀","/items/griffin_bulwark":"狮鹫重盾","/items/gobo_shooter":"哥布林弹弓","/items/vampiric_bow":"吸血弓","/items/cursed_bow":"咒怨之弓","/items/gobo_boomstick":"哥布林火棍","/items/cheese_bulwark":"奶酪重盾","/items/verdant_bulwark":"翠绿重盾","/items/azure_bulwark":"蔚蓝重盾","/items/burble_bulwark":"深紫重盾","/items/crimson_bulwark":"绯红重盾","/items/rainbow_bulwark":"彩虹重盾","/items/holy_bulwark":"神圣重盾","/items/wooden_bow":"木弓","/items/birch_bow":"桦木弓","/items/cedar_bow":"雪松弓","/items/purpleheart_bow":"紫心弓","/items/ginkgo_bow":"银杏弓","/items/redwood_bow":"红杉弓","/items/arcane_bow":"神秘弓","/items/stalactite_spear":"石钟长枪","/items/granite_bludgeon":"花岗岩大棒","/items/furious_spear":"狂怒长枪","/items/regal_sword":"君王之剑","/items/chaotic_flail":"混沌连枷","/items/soul_hunter_crossbow":"灵魂猎手弩","/items/sundering_crossbow":"裂空之弩","/items/frost_staff":"冰霜法杖","/items/infernal_battlestaff":"炼狱法杖","/items/jackalope_staff":"鹿角兔之杖","/items/rippling_trident":"涟漪三叉戟","/items/blooming_trident":"绽放三叉戟","/items/blazing_trident":"炽焰三叉戟","/items/cheese_sword":"奶酪剑","/items/verdant_sword":"翠绿剑","/items/azure_sword":"蔚蓝剑","/items/burble_sword":"深紫剑","/items/crimson_sword":"绯红剑","/items/rainbow_sword":"彩虹剑","/items/holy_sword":"神圣剑","/items/cheese_spear":"奶酪长枪","/items/verdant_spear":"翠绿长枪","/items/azure_spear":"蔚蓝长枪","/items/burble_spear":"深紫长枪","/items/crimson_spear":"绯红长枪","/items/rainbow_spear":"彩虹长枪","/items/holy_spear":"神圣长枪","/items/cheese_mace":"奶酪钉头锤","/items/verdant_mace":"翠绿钉头锤","/items/azure_mace":"蔚蓝钉头锤","/items/burble_mace":"深紫钉头锤","/items/crimson_mace":"绯红钉头锤","/items/rainbow_mace":"彩虹钉头锤","/items/holy_mace":"神圣钉头锤","/items/wooden_crossbow":"木弩","/items/birch_crossbow":"桦木弩","/items/cedar_crossbow":"雪松弩","/items/purpleheart_crossbow":"紫心弩","/items/ginkgo_crossbow":"银杏弩","/items/redwood_crossbow":"红杉弩","/items/arcane_crossbow":"神秘弩","/items/wooden_water_staff":"木制水法杖","/items/birch_water_staff":"桦木水法杖","/items/cedar_water_staff":"雪松水法杖","/items/purpleheart_water_staff":"紫心水法杖","/items/ginkgo_water_staff":"银杏水法杖","/items/redwood_water_staff":"红杉水法杖","/items/arcane_water_staff":"神秘水法杖","/items/wooden_nature_staff":"木制自然法杖","/items/birch_nature_staff":"桦木自然法杖","/items/cedar_nature_staff":"雪松自然法杖","/items/purpleheart_nature_staff":"紫心自然法杖","/items/ginkgo_nature_staff":"银杏自然法杖","/items/redwood_nature_staff":"红杉自然法杖","/items/arcane_nature_staff":"神秘自然法杖","/items/wooden_fire_staff":"木制火法杖","/items/birch_fire_staff":"桦木火法杖","/items/cedar_fire_staff":"雪松火法杖","/items/purpleheart_fire_staff":"紫心火法杖","/items/ginkgo_fire_staff":"银杏火法杖","/items/redwood_fire_staff":"红杉火法杖","/items/arcane_fire_staff":"神秘火法杖","/items/eye_watch":"掌上监工","/items/snake_fang_dirk":"蛇牙短剑","/items/vision_shield":"视觉盾","/items/gobo_defender":"哥布林防御者","/items/vampire_fang_dirk":"吸血鬼短剑","/items/knights_aegis":"骑士盾","/items/treant_shield":"树人盾","/items/manticore_shield":"蝎狮盾","/items/tome_of_healing":"治疗之书","/items/tome_of_the_elements":"元素之书","/items/watchful_relic":"警戒遗物","/items/bishops_codex":"主教法典","/items/cheese_buckler":"奶酪圆盾","/items/verdant_buckler":"翠绿圆盾","/items/azure_buckler":"蔚蓝圆盾","/items/burble_buckler":"深紫圆盾","/items/crimson_buckler":"绯红圆盾","/items/rainbow_buckler":"彩虹圆盾","/items/holy_buckler":"神圣圆盾","/items/wooden_shield":"木盾","/items/birch_shield":"桦木盾","/items/cedar_shield":"雪松盾","/items/purpleheart_shield":"紫心盾","/items/ginkgo_shield":"银杏盾","/items/redwood_shield":"红杉盾","/items/arcane_shield":"神秘盾","/items/sinister_cape":"阴森斗篷","/items/chimerical_quiver":"奇幻箭袋","/items/enchanted_cloak":"秘法披风","/items/red_culinary_hat":"红色厨师帽","/items/snail_shell_helmet":"蜗牛壳头盔","/items/vision_helmet":"视觉头盔","/items/fluffy_red_hat":"蓬松红帽子","/items/corsair_helmet":"掠夺者头盔","/items/acrobatic_hood":"杂技师兜帽","/items/magicians_hat":"魔术师帽","/items/cheese_helmet":"奶酪头盔","/items/verdant_helmet":"翠绿头盔","/items/azure_helmet":"蔚蓝头盔","/items/burble_helmet":"深紫头盔","/items/crimson_helmet":"绯红头盔","/items/rainbow_helmet":"彩虹头盔","/items/holy_helmet":"神圣头盔","/items/rough_hood":"粗糙兜帽","/items/reptile_hood":"爬行动物兜帽","/items/gobo_hood":"哥布林兜帽","/items/beast_hood":"野兽兜帽","/items/umbral_hood":"暗影兜帽","/items/cotton_hat":"棉帽","/items/linen_hat":"亚麻帽","/items/bamboo_hat":"竹帽","/items/silk_hat":"丝帽","/items/radiant_hat":"光辉帽","/items/dairyhands_top":"挤奶工上衣","/items/foragers_top":"采摘者上衣","/items/lumberjacks_top":"伐木工上衣","/items/cheesemakers_top":"奶酪师上衣","/items/crafters_top":"工匠上衣","/items/tailors_top":"裁缝上衣","/items/chefs_top":"厨师上衣","/items/brewers_top":"饮品师上衣","/items/alchemists_top":"炼金师上衣","/items/gator_vest":"鳄鱼马甲","/items/turtle_shell_body":"龟壳胸甲","/items/colossus_plate_body":"巨像胸甲","/items/demonic_plate_body":"恶魔胸甲","/items/anchorbound_plate_body":"锚定胸甲","/items/maelstrom_plate_body":"怒涛胸甲","/items/marine_tunic":"海洋皮衣","/items/revenant_tunic":"亡灵皮衣","/items/griffin_tunic":"狮鹫皮衣","/items/kraken_tunic":"克拉肯皮衣","/items/icy_robe_top":"冰霜袍服","/items/flaming_robe_top":"烈焰袍服","/items/luna_robe_top":"月神袍服","/items/royal_water_robe_top":"皇家水系袍服","/items/royal_nature_robe_top":"皇家自然系袍服","/items/royal_fire_robe_top":"皇家火系袍服","/items/cheese_plate_body":"奶酪胸甲","/items/verdant_plate_body":"翠绿胸甲","/items/azure_plate_body":"蔚蓝胸甲","/items/burble_plate_body":"深紫胸甲","/items/crimson_plate_body":"绯红胸甲","/items/rainbow_plate_body":"彩虹胸甲","/items/holy_plate_body":"神圣胸甲","/items/rough_tunic":"粗糙皮衣","/items/reptile_tunic":"爬行动物皮衣","/items/gobo_tunic":"哥布林皮衣","/items/beast_tunic":"野兽皮衣","/items/umbral_tunic":"暗影皮衣","/items/cotton_robe_top":"棉布袍服","/items/linen_robe_top":"亚麻袍服","/items/bamboo_robe_top":"竹袍服","/items/silk_robe_top":"丝绸袍服","/items/radiant_robe_top":"光辉袍服","/items/dairyhands_bottoms":"挤奶工下装","/items/foragers_bottoms":"采摘者下装","/items/lumberjacks_bottoms":"伐木工下装","/items/cheesemakers_bottoms":"奶酪师下装","/items/crafters_bottoms":"工匠下装","/items/tailors_bottoms":"裁缝下装","/items/chefs_bottoms":"厨师下装","/items/brewers_bottoms":"饮品师下装","/items/alchemists_bottoms":"炼金师下装","/items/turtle_shell_legs":"龟壳腿甲","/items/colossus_plate_legs":"巨像腿甲","/items/demonic_plate_legs":"恶魔腿甲","/items/anchorbound_plate_legs":"锚定腿甲","/items/maelstrom_plate_legs":"怒涛腿甲","/items/marine_chaps":"航海皮裤","/items/revenant_chaps":"亡灵皮裤","/items/griffin_chaps":"狮鹫皮裤","/items/kraken_chaps":"克拉肯皮裤","/items/icy_robe_bottoms":"冰霜袍裙","/items/flaming_robe_bottoms":"烈焰袍裙","/items/luna_robe_bottoms":"月神袍裙","/items/royal_water_robe_bottoms":"皇家水系袍裙","/items/royal_nature_robe_bottoms":"皇家自然系袍裙","/items/royal_fire_robe_bottoms":"皇家火系袍裙","/items/cheese_plate_legs":"奶酪腿甲","/items/verdant_plate_legs":"翠绿腿甲","/items/azure_plate_legs":"蔚蓝腿甲","/items/burble_plate_legs":"深紫腿甲","/items/crimson_plate_legs":"绯红腿甲","/items/rainbow_plate_legs":"彩虹腿甲","/items/holy_plate_legs":"神圣腿甲","/items/rough_chaps":"粗糙皮裤","/items/reptile_chaps":"爬行动物皮裤","/items/gobo_chaps":"哥布林皮裤","/items/beast_chaps":"野兽皮裤","/items/umbral_chaps":"暗影皮裤","/items/cotton_robe_bottoms":"棉袍裙","/items/linen_robe_bottoms":"亚麻袍裙","/items/bamboo_robe_bottoms":"竹袍裙","/items/silk_robe_bottoms":"丝绸袍裙","/items/radiant_robe_bottoms":"光辉袍裙","/items/pincer_gloves":"蟹钳手套","/items/panda_gloves":"熊猫手套","/items/magnetic_gloves":"磁力手套","/items/dodocamel_gauntlets":"渡渡驼护手","/items/sighted_bracers":"瞄准护腕","/items/marksman_bracers":"神射护腕","/items/chrono_gloves":"时空手套","/items/cheese_gauntlets":"奶酪护手","/items/verdant_gauntlets":"翠绿护手","/items/azure_gauntlets":"蔚蓝护手","/items/burble_gauntlets":"深紫护手","/items/crimson_gauntlets":"绯红护手","/items/rainbow_gauntlets":"彩虹护手","/items/holy_gauntlets":"神圣护手","/items/rough_bracers":"粗糙护腕","/items/reptile_bracers":"爬行动物护腕","/items/gobo_bracers":"哥布林护腕","/items/beast_bracers":"野兽护腕","/items/umbral_bracers":"暗影护腕","/items/cotton_gloves":"棉手套","/items/linen_gloves":"亚麻手套","/items/bamboo_gloves":"竹手套","/items/silk_gloves":"丝手套","/items/radiant_gloves":"光辉手套","/items/collectors_boots":"收藏家靴","/items/shoebill_shoes":"鲸头鹳鞋","/items/black_bear_shoes":"黑熊鞋","/items/grizzly_bear_shoes":"棕熊鞋","/items/polar_bear_shoes":"北极熊鞋","/items/centaur_boots":"半人马靴","/items/sorcerer_boots":"巫师靴","/items/cheese_boots":"奶酪靴","/items/verdant_boots":"翠绿靴","/items/azure_boots":"蔚蓝靴","/items/burble_boots":"深紫靴","/items/crimson_boots":"绯红靴","/items/rainbow_boots":"彩虹靴","/items/holy_boots":"神圣靴","/items/rough_boots":"粗糙靴","/items/reptile_boots":"爬行动物靴","/items/gobo_boots":"哥布林靴","/items/beast_boots":"野兽靴","/items/umbral_boots":"暗影靴","/items/cotton_boots":"棉靴","/items/linen_boots":"亚麻靴","/items/bamboo_boots":"竹靴","/items/silk_boots":"丝靴","/items/radiant_boots":"光辉靴","/items/small_pouch":"小袋子","/items/medium_pouch":"中袋子","/items/large_pouch":"大袋子","/items/giant_pouch":"巨大袋子","/items/gluttonous_pouch":"贪食之袋","/items/guzzling_pouch":"暴饮之囊","/items/basic_task_badge":"基础任务徽章","/items/advanced_task_badge":"高级任务徽章","/items/expert_task_badge":"专家任务徽章","/items/celestial_brush":"星空刷子","/items/cheese_brush":"奶酪刷子","/items/verdant_brush":"翠绿刷子","/items/azure_brush":"蔚蓝刷子","/items/burble_brush":"深紫刷子","/items/crimson_brush":"绯红刷子","/items/rainbow_brush":"彩虹刷子","/items/holy_brush":"神圣刷子","/items/celestial_shears":"星空剪刀","/items/cheese_shears":"奶酪剪刀","/items/verdant_shears":"翠绿剪刀","/items/azure_shears":"蔚蓝剪刀","/items/burble_shears":"深紫剪刀","/items/crimson_shears":"绯红剪刀","/items/rainbow_shears":"彩虹剪刀","/items/holy_shears":"神圣剪刀","/items/celestial_hatchet":"星空斧头","/items/cheese_hatchet":"奶酪斧头","/items/verdant_hatchet":"翠绿斧头","/items/azure_hatchet":"蔚蓝斧头","/items/burble_hatchet":"深紫斧头","/items/crimson_hatchet":"绯红斧头","/items/rainbow_hatchet":"彩虹斧头","/items/holy_hatchet":"神圣斧头","/items/celestial_hammer":"星空锤子","/items/cheese_hammer":"奶酪锤子","/items/verdant_hammer":"翠绿锤子","/items/azure_hammer":"蔚蓝锤子","/items/burble_hammer":"深紫锤子","/items/crimson_hammer":"绯红锤子","/items/rainbow_hammer":"彩虹锤子","/items/holy_hammer":"神圣锤子","/items/celestial_chisel":"星空凿子","/items/cheese_chisel":"奶酪凿子","/items/verdant_chisel":"翠绿凿子","/items/azure_chisel":"蔚蓝凿子","/items/burble_chisel":"深紫凿子","/items/crimson_chisel":"绯红凿子","/items/rainbow_chisel":"彩虹凿子","/items/holy_chisel":"神圣凿子","/items/celestial_needle":"星空针","/items/cheese_needle":"奶酪针","/items/verdant_needle":"翠绿针","/items/azure_needle":"蔚蓝针","/items/burble_needle":"深紫针","/items/crimson_needle":"绯红针","/items/rainbow_needle":"彩虹针","/items/holy_needle":"神圣针","/items/celestial_spatula":"星空锅铲","/items/cheese_spatula":"奶酪锅铲","/items/verdant_spatula":"翠绿锅铲","/items/azure_spatula":"蔚蓝锅铲","/items/burble_spatula":"深紫锅铲","/items/crimson_spatula":"绯红锅铲","/items/rainbow_spatula":"彩虹锅铲","/items/holy_spatula":"神圣锅铲","/items/celestial_pot":"星空壶","/items/cheese_pot":"奶酪壶","/items/verdant_pot":"翠绿壶","/items/azure_pot":"蔚蓝壶","/items/burble_pot":"深紫壶","/items/crimson_pot":"绯红壶","/items/rainbow_pot":"彩虹壶","/items/holy_pot":"神圣壶","/items/celestial_alembic":"星空蒸馏器","/items/cheese_alembic":"奶酪蒸馏器","/items/verdant_alembic":"翠绿蒸馏器","/items/azure_alembic":"蔚蓝蒸馏器","/items/burble_alembic":"深紫蒸馏器","/items/crimson_alembic":"绯红蒸馏器","/items/rainbow_alembic":"彩虹蒸馏器","/items/holy_alembic":"神圣蒸馏器","/items/celestial_enhancer":"星空强化器","/items/cheese_enhancer":"奶酪强化器","/items/verdant_enhancer":"翠绿强化器","/items/azure_enhancer":"蔚蓝强化器","/items/burble_enhancer":"深紫强化器","/items/crimson_enhancer":"绯红强化器","/items/rainbow_enhancer":"彩虹强化器","/items/holy_enhancer":"神圣强化器","/items/milk":"牛奶","/items/verdant_milk":"翠绿牛奶","/items/azure_milk":"蔚蓝牛奶","/items/burble_milk":"深紫牛奶","/items/crimson_milk":"绯红牛奶","/items/rainbow_milk":"彩虹牛奶","/items/holy_milk":"神圣牛奶","/items/cheese":"奶酪","/items/verdant_cheese":"翠绿奶酪","/items/azure_cheese":"蔚蓝奶酪","/items/burble_cheese":"深紫奶酪","/items/crimson_cheese":"绯红奶酪","/items/rainbow_cheese":"彩虹奶酪","/items/holy_cheese":"神圣奶酪","/items/log":"原木","/items/birch_log":"白桦原木","/items/cedar_log":"雪松原木","/items/purpleheart_log":"紫心原木","/items/ginkgo_log":"银杏原木","/items/redwood_log":"红杉原木","/items/arcane_log":"神秘原木","/items/lumber":"木板","/items/birch_lumber":"白桦木板","/items/cedar_lumber":"雪松木板","/items/purpleheart_lumber":"紫心木板","/items/ginkgo_lumber":"银杏木板","/items/redwood_lumber":"红杉木板","/items/arcane_lumber":"神秘木板","/items/rough_hide":"粗糙兽皮","/items/reptile_hide":"爬行动物皮","/items/gobo_hide":"哥布林皮","/items/beast_hide":"野兽皮","/items/umbral_hide":"暗影皮","/items/rough_leather":"粗糙皮革","/items/reptile_leather":"爬行动物皮革","/items/gobo_leather":"哥布林皮革","/items/beast_leather":"野兽皮革","/items/umbral_leather":"暗影皮革","/items/cotton":"棉花","/items/flax":"亚麻","/items/bamboo_branch":"竹子","/items/cocoon":"蚕茧","/items/radiant_fiber":"光辉纤维","/items/cotton_fabric":"棉花布料","/items/linen_fabric":"亚麻布料","/items/bamboo_fabric":"竹子布料","/items/silk_fabric":"丝绸","/items/radiant_fabric":"光辉布料","/items/egg":"鸡蛋","/items/wheat":"小麦","/items/sugar":"糖","/items/blueberry":"蓝莓","/items/blackberry":"黑莓","/items/strawberry":"草莓","/items/mooberry":"哞莓","/items/marsberry":"火星莓","/items/spaceberry":"太空莓","/items/apple":"苹果","/items/orange":"橙子","/items/plum":"李子","/items/peach":"桃子","/items/dragon_fruit":"火龙果","/items/star_fruit":"杨桃","/items/arabica_coffee_bean":"低级咖啡豆","/items/robusta_coffee_bean":"中级咖啡豆","/items/liberica_coffee_bean":"高级咖啡豆","/items/excelsa_coffee_bean":"特级咖啡豆","/items/fieriosa_coffee_bean":"火山咖啡豆","/items/spacia_coffee_bean":"太空咖啡豆","/items/green_tea_leaf":"绿茶叶","/items/black_tea_leaf":"黑茶叶","/items/burble_tea_leaf":"紫茶叶","/items/moolong_tea_leaf":"哞龙茶叶","/items/red_tea_leaf":"红茶叶","/items/emp_tea_leaf":"虚空茶叶","/items/catalyst_of_coinification":"点金催化剂","/items/catalyst_of_decomposition":"分解催化剂","/items/catalyst_of_transmutation":"转化催化剂","/items/prime_catalyst":"至高催化剂","/items/snake_fang":"蛇牙","/items/shoebill_feather":"鲸头鹳羽毛","/items/snail_shell":"蜗牛壳","/items/crab_pincer":"蟹钳","/items/turtle_shell":"乌龟壳","/items/marine_scale":"海洋鳞片","/items/treant_bark":"树皮","/items/centaur_hoof":"半人马蹄","/items/luna_wing":"月神翼","/items/gobo_rag":"哥布林抹布","/items/goggles":"护目镜","/items/magnifying_glass":"放大镜","/items/eye_of_the_watcher":"观察者之眼","/items/icy_cloth":"冰霜织物","/items/flaming_cloth":"烈焰织物","/items/sorcerers_sole":"魔法师鞋底","/items/chrono_sphere":"时空球","/items/frost_sphere":"冰霜球","/items/panda_fluff":"熊猫绒","/items/black_bear_fluff":"黑熊绒","/items/grizzly_bear_fluff":"棕熊绒","/items/polar_bear_fluff":"北极熊绒","/items/red_panda_fluff":"小熊猫绒","/items/magnet":"磁铁","/items/stalactite_shard":"钟乳石碎片","/items/living_granite":"花岗岩","/items/colossus_core":"巨像核心","/items/vampire_fang":"吸血鬼之牙","/items/werewolf_claw":"狼人之爪","/items/revenant_anima":"亡者之魂","/items/soul_fragment":"灵魂碎片","/items/infernal_ember":"地狱余烬","/items/demonic_core":"恶魔核心","/items/griffin_leather":"狮鹫之皮","/items/manticore_sting":"蝎狮之刺","/items/jackalope_antler":"鹿角兔之角","/items/dodocamel_plume":"渡渡驼之羽","/items/griffin_talon":"狮鹫之爪","/items/acrobats_ribbon":"杂技师彩带","/items/magicians_cloth":"魔术师织物","/items/chaotic_chain":"混沌锁链","/items/cursed_ball":"诅咒之球","/items/royal_cloth":"皇家织物","/items/knights_ingot":"骑士之锭","/items/bishops_scroll":"主教卷轴","/items/regal_jewel":"君王宝石","/items/sundering_jewel":"裂空宝石","/items/marksman_brooch":"神射胸针","/items/corsair_crest":"掠夺者徽章","/items/damaged_anchor":"破损船锚","/items/maelstrom_plating":"怒涛甲片","/items/kraken_leather":"克拉肯皮革","/items/kraken_fang":"克拉肯之牙","/items/butter_of_proficiency":"精通之油","/items/thread_of_expertise":"专精之线","/items/branch_of_insight":"洞察之枝","/items/gluttonous_energy":"贪食能量","/items/guzzling_energy":"暴饮能量","/items/milking_essence":"挤奶精华","/items/foraging_essence":"采摘精华","/items/woodcutting_essence":"伐木精华","/items/cheesesmithing_essence":"奶酪锻造精华","/items/crafting_essence":"制作精华","/items/tailoring_essence":"缝纫精华","/items/cooking_essence":"烹饪精华","/items/brewing_essence":"冲泡精华","/items/alchemy_essence":"炼金精华","/items/enhancing_essence":"强化精华","/items/swamp_essence":"沼泽精华","/items/aqua_essence":"海洋精华","/items/jungle_essence":"丛林精华","/items/gobo_essence":"哥布林精华","/items/eyessence":"眼精华","/items/sorcerer_essence":"法师精华","/items/bear_essence":"熊熊精华","/items/golem_essence":"魔像精华","/items/twilight_essence":"暮光精华","/items/abyssal_essence":"地狱精华","/items/chimerical_essence":"奇幻精华","/items/sinister_essence":"阴森精华","/items/enchanted_essence":"秘法精华","/items/pirate_essence":"海盗精华","/items/task_crystal":"任务水晶","/items/star_fragment":"星光碎片","/items/pearl":"珍珠","/items/amber":"琥珀","/items/garnet":"石榴石","/items/jade":"翡翠","/items/amethyst":"紫水晶","/items/moonstone":"月亮石","/items/sunstone":"太阳石","/items/philosophers_stone":"贤者之石","/items/crushed_pearl":"珍珠碎片","/items/crushed_amber":"琥珀碎片","/items/crushed_garnet":"石榴石碎片","/items/crushed_jade":"翡翠碎片","/items/crushed_amethyst":"紫水晶碎片","/items/crushed_moonstone":"月亮石碎片","/items/crushed_sunstone":"太阳石碎片","/items/crushed_philosophers_stone":"贤者之石碎片","/items/earrings_of_gathering":"采集耳环","/items/earrings_of_essence_find":"精华发现耳环","/items/protection_fragment":"保护碎片","/items/protection_fragment_1":"保护碎片+1","/items/protection_fragment_2":"保护碎片+2","/items/protection_fragment_3":"保护碎片+3","/items/protection_fragment_4":"保护碎片+4","/items/protection_fragment_5":"保护碎片+5","/items/protection_fragment_6":"保护碎片+6","/items/protection_fragment_7":"保护碎片+7","/items/protection_fragment_8":"保护碎片+8","/items/protection_fragment_9":"保护碎片+9","/items/protection_fragment_10":"保护碎片+10","/items/protection_fragment_11":"保护碎片+11","/items/protection_fragment_12":"保护碎片+12","/items/protection_fragment_13":"保护碎片+13","/items/protection_fragment_14":"保护碎片+14","/items/protection_fragment_15":"保护碎片+15","/items/protection_fragment_16":"保护碎片+16","/items/protection_fragment_17":"保护碎片+17","/items/protection_fragment_18":"保护碎片+18","/items/protection_fragment_19":"保护碎片+19","/items/protection_fragment_20":"保护碎片+20","/items/mirror":"镜子","/items/mirror_1":"镜子+1","/items/mirror_2":"镜子+2","/items/mirror_3":"镜子+3","/items/mirror_4":"镜子+4","/items/mirror_5":"镜子+5","/items/mirror_6":"镜子+6","/items/mirror_7":"镜子+7","/items/mirror_8":"镜子+8","/items/mirror_9":"镜子+9","/items/mirror_10":"镜子+10","/items/mirror_11":"镜子+11","/items/mirror_12":"镜子+12","/items/mirror_13":"镜子+13","/items/mirror_14":"镜子+14","/items/mirror_15":"镜子+15","/items/mirror_16":"镜子+16","/items/mirror_17":"镜子+17","/items/mirror_18":"镜子+18","/items/mirror_19":"镜子+19","/items/mirror_20":"镜子+20","/items/earrings_of_armor":"护甲耳环","/items/earrings_of_regeneration":"恢复耳环","/items/earrings_of_resistance":"抗性耳环","/items/earrings_of_rare_find":"稀有发现耳环","/items/earrings_of_critical_strike":"暴击耳环","/items/philosophers_earrings":"贤者耳环","/items/ring_of_gathering":"采集戒指","/items/ring_of_essence_find":"精华发现戒指","/items/ring_of_armor":"护甲戒指","/items/ring_of_regeneration":"恢复戒指","/items/ring_of_resistance":"抗性戒指","/items/ring_of_rare_find":"稀有发现戒指","/items/ring_of_critical_strike":"暴击戒指","/items/philosophers_ring":"贤者戒指","/items/necklace_of_efficiency":"效率项链","/items/fighter_necklace":"战士项链","/items/ranger_necklace":"射手项链","/items/wizard_necklace":"巫师项链","/items/necklace_of_wisdom":"经验项链","/items/necklace_of_speed":"速度项链","/items/philosophers_necklace":"贤者项链","/items/enhancers_top":"强化师上衣","/items/enhancers_bottoms":"强化师下装","/items/enchanted_gloves":"附魔手套","/items/shard_of_protection":"保护碎片","/items/mirror_of_protection":"保护之镜"}}initItemCategories(){return{weapons:["sword","bow","crossbow","spear","mace","flail","staff","wand"],armor:["helmet","hat","body","legs","gloves","boots","shoes"],accessories:["earrings","ring","necklace","amulet"],materials:["log","lumber","hide","leather","cotton","fabric","egg","wheat","sugar","berry","apple","orange","plum","peach","fruit","coffee_bean","tea_leaf","fang","feather","shell","pincer","scale","bark","hoof","wing","rag","cloth","sphere","fluff","magnet","shard","granite","core","claw","anima","fragment","ember","talon","ribbon","chain","ball","ingot","scroll","jewel","brooch","crest","anchor","plating","energy"],essences:["essence","crystal"],consumables:["donut","cake","yogurt","tea","coffee","milk","cheese","candy"],enhancement:["protection_fragment","mirror"]}}categorizeItem(itemName){const itemPath=itemName.toLowerCase();for(const[category,keywords]of Object.entries(this.itemCategories)){if(keywords.some(keyword=>itemPath.includes(keyword))){return category}}if(itemPath.includes("coin")||itemPath.includes("token")||itemPath.includes("key")||itemPath.includes("crate")||itemPath.includes("chest")||itemPath.includes("capsule")){return"others"}return"others"}getCategoryName(category){const categoryNames={weapons:"武器",armor:"防具",accessories:"配饰",materials:"材料",essences:"精华",consumables:"消耗品",enhancement:"强化物品",others:"其他"};return categoryNames[category]||"其他"}async init(){this.bindEvents();await this.loadSavedConfigs();await this.loadSavedRecipes();await this.autoLoadLastConfig();this.updateBonusAttributes()}bindEvents(){document.getElementById("loadDataBtn").addEventListener("click",()=>this.loadMarketData());document.getElementById("itemSearch").addEventListener("input",e=>this.filterItems(e.target.value));document.getElementById("backToItems").addEventListener("click",()=>this.showItemSelection());document.addEventListener("click",e=>{if(e.target.classList.contains("category-btn")){document.querySelectorAll(".category-btn").forEach(btn=>btn.classList.remove("active"));e.target.classList.add("active");this.currentCategory=e.target.dataset.category;this.renderItems(document.getElementById("itemSearch").value)}});document.getElementById("priceTab").addEventListener("click",()=>this.showPriceTab());document.getElementById("enhanceTab").addEventListener("click",()=>this.showEnhanceTab());document.getElementById("rankingTab").addEventListener("click",()=>this.showRankingTab());document.getElementById("customPriceTab").addEventListener("click",()=>this.showCustomPriceTab());document.getElementById("generateRanking").addEventListener("click",()=>this.generateRecipeRanking());document.getElementById("exportRanking").addEventListener("click",()=>this.exportRanking());document.getElementById("decreaseLevel").addEventListener("click",()=>{this.adjustTargetLevel(-1)});document.getElementById("increaseLevel").addEventListener("click",()=>{this.adjustTargetLevel(1)});document.getElementById("addMaterial").addEventListener("click",()=>this.addMaterial());document.getElementById("saveRecipe").addEventListener("click",()=>this.saveRecipe());document.getElementById("loadRecipe").addEventListener("click",()=>this.loadRecipe());document.getElementById("deleteRecipe").addEventListener("click",()=>this.deleteRecipe());document.getElementById("runSimulation").addEventListener("click",()=>this.runSimulation());document.getElementById("targetLevel").addEventListener("change",()=>this.saveEnhanceState());document.getElementById("itemLevel").addEventListener("change",()=>this.saveEnhanceState());document.getElementById("enhanceCost").addEventListener("input",()=>this.saveEnhanceState());document.addEventListener("input",e=>{if(["targetLevel","itemLevel","enhanceCost"].includes(e.target.id)){this.saveEnhanceState()}});document.getElementById("saveConfig").addEventListener("click",()=>this.saveCharacterConfig());document.getElementById("loadConfig").addEventListener("click",()=>this.loadCharacterConfig());document.getElementById("addCustomItem").addEventListener("click",()=>this.addCustomItem());document.getElementById("saveCustomPriceConfig").addEventListener("click",()=>this.saveCustomPriceConfig());document.getElementById("loadCustomPriceConfig").addEventListener("click",()=>this.loadCustomPriceConfig());document.getElementById("deleteCustomPriceConfig").addEventListener("click",()=>this.deleteCustomPriceConfig());document.getElementById("applyCustomPrices")?.addEventListener("click",()=>this.applyCustomPrices());document.getElementById("cancelCustomPrices")?.addEventListener("click",()=>{this.cancelCustomPrices()});document.getElementById("exportConfigs").addEventListener("click",()=>this.exportConfigs());document.getElementById("importConfigs").addEventListener("click",()=>this.importConfigs());const configInputs=["characterLevel","observatoryLevel","enhancerShirt","enhancerPants","enhancerGloves","speedNecklace","drinkConcentration","enhancerBonus","itemLevel","communityBuff","enhancingTea","superEnhancingTea","ultimateTea","luckTea"];configInputs.forEach(id=>{const element=document.getElementById(id);if(element){element.addEventListener("change",()=>this.updateBonusAttributes());element.addEventListener("input",()=>this.updateBonusAttributes())}})}async loadMarketData(){const loadBtn=document.getElementById("loadDataBtn");const loadingStatus=document.getElementById("loadingStatus");try{loadBtn.disabled=true;loadBtn.textContent="加载中...";loadingStatus.classList.remove("hidden");const response=await fetch("https://mooket.qi-e.top/market/api.json");if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`)}const data=await response.json();this.marketData=data.marketData;loadingStatus.textContent="数据加载成功！";loadingStatus.style.background="#f0fff4";loadingStatus.style.borderColor="#38a169";loadingStatus.style.color="#22543d";setTimeout(()=>{loadingStatus.classList.add("hidden");const priceTab=document.getElementById("priceTab");if(priceTab&&priceTab.classList.contains("active")){this.showItemSelection()}const enhanceTab=document.getElementById("enhanceTab");if(enhanceTab&&enhanceTab.classList.contains("active")){this.populateItemSelects()}},1e3)}catch(error){console.error("加载数据失败:",error);loadingStatus.textContent="数据加载失败，请检查网络连接后重试";loadingStatus.style.background="#fed7d7";loadingStatus.style.borderColor="#e53e3e";loadingStatus.style.color="#742a2a"}finally{loadBtn.disabled=false;loadBtn.textContent="加载市场数据"}}showItemSelection(){document.getElementById("itemSelection").classList.remove("hidden");document.getElementById("levelSelection").classList.add("hidden");document.getElementById("priceDisplay").classList.add("hidden");this.renderItems()}renderItems(filter=""){const itemList=document.getElementById("itemList");itemList.innerHTML="";if(!this.marketData)return;let expandedItems=[];Object.keys(this.marketData).forEach(itemName=>{const itemData=this.marketData[itemName];const levels=Object.keys(itemData);levels.forEach(level=>{const expandedItemName=level==="0"?itemName:`${itemName}+${level}`;const displayName=this.formatItemName(itemName)+(level==="0"?"":`+${level}`);expandedItems.push({key:`${itemName}|${level}`,itemName:itemName,level:level,displayName:displayName,expandedName:expandedItemName})})});let filteredItems=expandedItems.filter(item=>item.displayName.toLowerCase().includes(filter.toLowerCase()));if(this.currentCategory!=="all"){filteredItems=filteredItems.filter(item=>this.categorizeItem(item.itemName)===this.currentCategory)}filteredItems.forEach(item=>{const itemCard=document.createElement("div");itemCard.className="item-card";const category=this.categorizeItem(item.itemName);itemCard.innerHTML=`
                <div class="item-name">${item.displayName}</div>
                <div class="item-category">${this.getCategoryName(category)}</div>
            `;itemCard.addEventListener("click",()=>this.selectItemWithLevel(item.itemName,item.level));itemList.appendChild(itemCard)});if(filteredItems.length===0){itemList.innerHTML='<p style="text-align: center; color: #718096; grid-column: 1 / -1;">未找到匹配的物品</p>'}}formatItemName(itemName){if(this.itemTranslations[itemName]){return this.itemTranslations[itemName]}return itemName.replace("/items/","").replace(/_/g," ").replace(/\b\w/g,l=>l.toUpperCase())}selectItemWithLevel(itemName,level){this.selectedItem=itemName;this.selectedLevel=level;this.showPriceDisplay()}selectItem(itemName){this.selectedItem=itemName;const itemData=this.marketData[itemName];const levels=Object.keys(itemData);if(levels.length===1){this.selectedLevel=levels[0];this.showPriceDisplay()}else{this.showLevelSelection(levels)}}showLevelSelection(levels){document.getElementById("itemSelection").classList.add("hidden");document.getElementById("levelSelection").classList.remove("hidden");document.getElementById("priceDisplay").classList.add("hidden");const levelButtons=document.getElementById("levelButtons");levelButtons.innerHTML="";const sortedLevels=levels.sort((a,b)=>parseInt(a)-parseInt(b));sortedLevels.forEach(level=>{const levelBtn=document.createElement("div");levelBtn.className="level-btn";levelBtn.textContent=`+${level}`;levelBtn.addEventListener("click",()=>{this.selectedLevel=level;this.showPriceDisplay()});levelButtons.appendChild(levelBtn)})}showPriceDisplay(){document.getElementById("itemSelection").classList.add("hidden");document.getElementById("levelSelection").classList.add("hidden");document.getElementById("priceDisplay").classList.remove("hidden");const itemData=this.marketData[this.selectedItem][this.selectedLevel];document.getElementById("selectedItemName").textContent=this.formatItemName(this.selectedItem);document.getElementById("selectedLevel").textContent=`强化等级: +${this.selectedLevel}`;const askPriceElement=document.getElementById("askPrice");const bidPriceElement=document.getElementById("bidPrice");if(itemData.a===-1){askPriceElement.textContent="暂无数据";askPriceElement.className="price-value unavailable"}else{askPriceElement.textContent=this.formatPrice(itemData.a);askPriceElement.className="price-value"}if(itemData.b===-1){bidPriceElement.textContent="暂无数据";bidPriceElement.className="price-value unavailable"}else{bidPriceElement.textContent=this.formatPrice(itemData.b);bidPriceElement.className="price-value"}}formatPrice(price){if(price===-1)return"暂无数据";let formattedNumber;if(price>=1e6){formattedNumber=(price/1e6).toFixed(1)+"M"}else if(price>=1e3){formattedNumber=(price/1e3).toFixed(1)+"K"}else{formattedNumber=price.toString()}return formattedNumber+" 金币"}formatHourlyRate(price){if(price===Infinity){return"∞"}if(price===-Infinity||price===null||price===undefined||isNaN(price)){return"-"}const absPrice=Math.abs(price);let formattedPrice;if(absPrice>=1e6){formattedPrice=(absPrice/1e6).toFixed(1)+"M"}else if(absPrice>=1e3){formattedPrice=(absPrice/1e3).toFixed(1)+"K"}else{formattedPrice=absPrice.toFixed(0)}return price<0?"-"+formattedPrice:formattedPrice}filterItems(searchTerm){this.renderItems(searchTerm)}showPriceTab(){document.getElementById("enhanceSimulator").classList.add("hidden");document.getElementById("recipeRanking").classList.add("hidden");document.getElementById("customPriceConfig").classList.add("hidden");if(this.marketData&&Object.keys(this.marketData).length>0){this.showItemSelection()}document.querySelectorAll(".tab-btn").forEach(btn=>btn.classList.remove("active"));document.getElementById("priceTab").classList.add("active")}showEnhanceTab(){document.getElementById("itemSelection").classList.add("hidden");document.getElementById("levelSelection").classList.add("hidden");document.getElementById("priceDisplay").classList.add("hidden");document.getElementById("recipeRanking").classList.add("hidden");document.getElementById("customPriceConfig").classList.add("hidden");document.getElementById("enhanceSimulator").classList.remove("hidden");document.querySelectorAll(".tab-btn").forEach(btn=>btn.classList.remove("active"));document.getElementById("enhanceTab").classList.add("active");if(this.marketData){this.populateItemSelects()}}showRankingTab(){this.saveEnhanceState();document.getElementById("itemSelection").classList.add("hidden");document.getElementById("levelSelection").classList.add("hidden");document.getElementById("priceDisplay").classList.add("hidden");document.getElementById("enhanceSimulator").classList.add("hidden");document.getElementById("customPriceConfig").classList.add("hidden");document.getElementById("recipeRanking").classList.remove("hidden");document.querySelectorAll(".tab-btn").forEach(btn=>btn.classList.remove("active"));document.getElementById("rankingTab").classList.add("active");const totalRecipes=Object.keys(this.recipes).length;document.getElementById("totalRecipes").textContent=totalRecipes;if(totalRecipes>0){document.getElementById("rankingStats").style.display="block"}this.updateLevelControlButtons();console.log("排行榜页面已打开，排行榜计算将使用当前页面的角色配置")}generateRecipeRanking(){try{if(Object.keys(this.recipes).length===0){alert("没有已保存的配方，请先在强化模拟器中保存一些配方");return}const targetLevelSelect=document.getElementById("targetLevelSelect");if(!targetLevelSelect){console.error("找不到目标等级选择框");alert("页面元素加载异常，请刷新页面重试");return}const selectedTargetLevel=parseInt(targetLevelSelect.value);console.log("开始生成排行榜，目标等级:",selectedTargetLevel);console.log("使用当前页面的角色配置进行计算");const rankingData=this.calculateAllRecipeRankings(selectedTargetLevel);this.currentRankingData=rankingData;console.log("排行榜数据:",rankingData);this.displayRecipeRanking(rankingData,selectedTargetLevel);console.log("排行榜生成完成")}catch(error){console.error("生成排行榜时发生错误:",error);alert("生成排行榜时发生错误: "+error.message)}}calculateAllRecipeRankings(targetLevel=null){const rankings=[];const priceType=document.getElementById("enhancePriceType").value||"mixed";const currentCharacterConfig=this.getCharacterConfig();Object.keys(this.recipes).forEach(recipeName=>{const recipe=this.recipes[recipeName];const actualTargetLevel=targetLevel||recipe.targetLevel;const levelResults=[];let maxHourlyRate=-Infinity;let maxHourlyRateLevel=0;for(let startLevel=0;startLevel<actualTargetLevel;startLevel++){let initialPrice=0;const initialPriceData=this.getItemPrice(recipe.targetItem,startLevel.toString(),priceType);if(initialPriceData){if(priceType==="mixed"){initialPrice=initialPriceData.a!==-1?initialPriceData.a:0}else if(priceType==="ask"){initialPrice=initialPriceData.a!==-1?initialPriceData.a:0}else if(priceType==="bid"){initialPrice=initialPriceData.b!==-1?initialPriceData.b:0}}let sellItemPrice=0;const targetPriceData=this.getItemPrice(recipe.targetItem,actualTargetLevel.toString(),priceType);if(targetPriceData){if(priceType==="mixed"){sellItemPrice=targetPriceData.b!==-1?targetPriceData.b:0}else if(priceType==="ask"){sellItemPrice=targetPriceData.a!==-1?targetPriceData.a:0}else if(priceType==="bid"){sellItemPrice=targetPriceData.b!==-1?targetPriceData.b:0}}let hourlyRate=0;let results=null;if(sellItemPrice!==0&&initialPrice!==0){results=this.calculateBestProtectionLevel(recipe.targetItem,startLevel,actualTargetLevel,currentCharacterConfig,recipe.materials,recipe.enhanceCost,recipe.protectionItem,recipe.itemLevel,sellItemPrice,priceType);hourlyRate=results.hourlyCost}levelResults.push({startLevel:startLevel,hourlyRate:hourlyRate,enhanceAttempts:results?.enhanceAttempts||0,enhanceTime:results?.enhanceTime||0,totalCost:results?.totalCost||0,bestProtectionLevel:results?.bestProtectionLevel||0});if(hourlyRate>maxHourlyRate){maxHourlyRate=hourlyRate;maxHourlyRateLevel=startLevel}}if(levelResults.length>0){rankings.push({recipeName:recipeName,recipe:recipe,actualTargetLevel:actualTargetLevel,levelResults:levelResults,maxHourlyRate:maxHourlyRate,maxHourlyRateLevel:maxHourlyRateLevel})}});rankings.sort((a,b)=>b.maxHourlyRate-a.maxHourlyRate);return rankings}displayRecipeRanking(rankingData,targetLevel=null){this.currentRankingData=rankingData;const rankingTable=document.getElementById("rankingTable");let html=`
            <div class="ranking-table-container">
                <div class="ranking-note" style="margin-bottom: 10px; padding: 10px; background-color: #e3f2fd; border-left: 4px solid #2196f3; font-size: 14px; color: #1976d2;">
                    <strong>注意：</strong>此排行榜使用当前页面上的角色配置进行计算，而非配方中保存的配置。
                </div>
                <table class="ranking-table">
                    <thead>
                        <tr>
                            <th rowspan="2">排名</th>
                            <th rowspan="2">配方名称</th>
                            <th rowspan="2">目标等级</th>
                            <th rowspan="2">最高工时费</th>
                            <th colspan="${rankingData[0]?.levelResults.length||0}">各起始等级工时费</th>
                        </tr>
                        <tr>`;if(rankingData.length>0){for(let i=0;i<rankingData[0].levelResults.length;i++){html+=`<th>+${i}</th>`}}html+=`</tr></thead><tbody>`;rankingData.forEach((item,index)=>{const displayTargetLevel=item.actualTargetLevel||item.recipe.targetLevel;html+=`
                <tr class="${index%2===0?"even":"odd"}">
                    <td class="rank">${index+1}</td>
                    <td class="recipe-name">${item.recipeName}</td>
                    <td class="target-level">+${displayTargetLevel}</td>
                    <td class="max-hourly-rate ${item.maxHourlyRate>=0?"positive":"negative"}">
                        ${this.formatHourlyRate(item.maxHourlyRate)}
                    </td>`;item.levelResults.forEach(result=>{const isMaxLevel=result.startLevel===item.maxHourlyRateLevel;html+=`<td class="hourly-rate ${result.hourlyRate>=0?"positive":"negative"} ${isMaxLevel?"max-highlight":""}">
                    ${this.formatHourlyRate(result.hourlyRate)}
                </td>`});html+=`</tr>`});html+=`</tbody></table></div>`;rankingTable.innerHTML=html;document.getElementById("rankingResults").classList.remove("hidden")}populateItemSelects(){const targetItemContainer=document.getElementById("targetItemContainer");const protectionItemContainer=document.getElementById("protectionItemContainer");if(!this.marketData)return;if(this.targetItemSelect){this.savedTargetItem=this.targetItemSelect.getValue()}if(this.protectionItemSelect){this.savedProtectionItem=this.protectionItemSelect.getValue()}const targetItemOptions=[];const addedItems=new Set;Object.keys(this.marketData).forEach(itemName=>{if(!addedItems.has(itemName)){targetItemOptions.push({value:itemName,text:this.formatItemName(itemName)});addedItems.add(itemName)}});const protectionItemOptions=Object.keys(this.marketData).map(itemName=>({value:itemName,text:this.formatItemName(itemName)}));this.targetItemSelect=new SearchableSelect(targetItemContainer,{placeholder:"选择要强化的物品",searchPlaceholder:"搜索物品...",onChange:(value,text)=>{console.log("强化物品选择:",value,text);this.savedTargetItem=value;this.saveEnhanceState();this.updateBonusAttributes()}});this.targetItemSelect.setData(targetItemOptions);this.protectionItemSelect=new SearchableSelect(protectionItemContainer,{placeholder:"不使用保护道具",searchPlaceholder:"搜索保护道具...",onChange:(value,text)=>{console.log("保护道具选择:",value,text);this.savedProtectionItem=value;this.saveEnhanceState();this.updateBonusAttributes()}});this.protectionItemSelect.setData(protectionItemOptions);this.restoreEnhanceState()}addMaterial(){const materialsList=document.getElementById("materialsList");const materialIndex=this.materials.length;const materialDiv=document.createElement("div");materialDiv.className="material-item";materialDiv.innerHTML=`
            <div class="material-select-container" data-index="${materialIndex}"></div>
            <input type="number" class="material-quantity" placeholder="数量" min="1" data-index="${materialIndex}">
            <input type="number" class="material-price" placeholder="单价" min="0" data-index="${materialIndex}">
            <button type="button" class="remove-material" data-index="${materialIndex}">删除</button>
        `;materialsList.appendChild(materialDiv);const materialContainer=materialDiv.querySelector(".material-select-container");const itemOptions=Object.keys(this.marketData||{}).map(itemName=>({value:itemName,text:this.formatItemName(itemName)}));const materialSelect=new SearchableSelect(materialContainer,{placeholder:"选择材料",searchPlaceholder:"搜索材料...",onChange:(value,text)=>{this.updateMaterialPrice(materialIndex,value)}});materialSelect.setData(itemOptions);materialDiv.querySelector(".remove-material").addEventListener("click",e=>{const index=parseInt(e.target.dataset.index);this.removeMaterial(index)});this.materials.push({item:"",quantity:0,price:0,selectComponent:materialSelect})}removeMaterial(index){const materialsList=document.getElementById("materialsList");const materialItems=materialsList.querySelectorAll(".material-item");if(materialItems[index]){materialItems[index].remove();this.materials.splice(index,1);this.updateMaterialIndices()}}updateMaterialIndices(){const materialsList=document.getElementById("materialsList");const materialItems=materialsList.querySelectorAll(".material-item");materialItems.forEach((item,index)=>{const elements=item.querySelectorAll("[data-index]");elements.forEach(el=>el.dataset.index=index)})}updateMaterialPrice(index,itemName){if(!itemName||!this.marketData[itemName])return;const itemData=this.marketData[itemName];const levels=Object.keys(itemData);const lowestLevel=levels.sort((a,b)=>parseInt(a)-parseInt(b))[0];const price=itemData[lowestLevel].a!==-1?itemData[lowestLevel].a:0;if(price!==0){const priceInput=document.querySelector(`input.material-price[data-index="${index}"]`);if(priceInput){priceInput.value=price}}}async saveRecipe(){const recipeName=document.getElementById("recipeName").value.trim();if(!recipeName){alert("请输入配方名称");return}const recipe={targetItem:this.targetItemSelect?this.targetItemSelect.getValue():"",targetLevel:parseInt(document.getElementById("targetLevel").value),itemLevel:parseInt(document.getElementById("itemLevel").value),enhanceCost:parseFloat(document.getElementById("enhanceCost").value),protectionItem:this.protectionItemSelect?this.protectionItemSelect.getValue():"",materials:this.getMaterialsData()};try{this.recipes[recipeName]=recipe;localStorage.setItem("enhanceRecipes",JSON.stringify(this.recipes));this.loadSavedRecipes();alert("配方保存成功！（保存到浏览器存储）")}catch(error){alert("保存失败: "+error.message)}}getMaterialsData(){const materials=[];const materialItems=document.querySelectorAll(".material-item");materialItems.forEach((item,index)=>{const quantity=item.querySelector(".material-quantity");const price=item.querySelector(".material-price");const materialData=this.materials[index];const itemValue=materialData&&materialData.selectComponent?materialData.selectComponent.getValue():"";if(itemValue&&quantity.value&&price.value){materials.push({item:itemValue,quantity:parseInt(quantity.value),price:parseFloat(price.value)})}});return materials}getCharacterConfig(){return{characterLevel:parseInt(document.getElementById("characterLevel").value),observatoryLevel:parseInt(document.getElementById("observatoryLevel").value),enhancingTea:document.getElementById("enhancingTea").checked,superEnhancingTea:document.getElementById("superEnhancingTea").checked,ultimateTea:document.getElementById("ultimateTea").checked,luckTea:document.getElementById("luckTea").checked,enhancerShirt:parseFloat(document.getElementById("enhancerShirt").value),enhancerPants:parseFloat(document.getElementById("enhancerPants").value),enhancerGloves:parseFloat(document.getElementById("enhancerGloves").value),speedNecklace:parseFloat(document.getElementById("speedNecklace").value),drinkConcentration:parseFloat(document.getElementById("drinkConcentration").value),enhancerBonus:parseFloat(document.getElementById("enhancerBonus").value),communityBuff:parseFloat(document.getElementById("communityBuff").value)}}async saveCharacterConfig(){const configName=document.getElementById("configName").value.trim();if(!configName){alert("请输入配置名称");return}const config=this.getCharacterConfig();try{let configs=JSON.parse(localStorage.getItem("characterConfigs")||"{}");configs[configName]=config;localStorage.setItem("characterConfigs",JSON.stringify(configs));localStorage.setItem("lastUsedConfig",configName);this.loadSavedConfigs();document.getElementById("configSelect").value=configName;alert("配置保存成功！（保存到浏览器存储）")}catch(error){alert("保存失败: "+error.message)}}async loadCharacterConfig(){const configName=document.getElementById("configSelect").value;if(!configName){alert("请选择一个配置");return}try{const configs=JSON.parse(localStorage.getItem("characterConfigs")||"{}");const config=configs[configName];if(!config){alert("配置不存在");return}document.getElementById("characterLevel").value=config.characterLevel||1;document.getElementById("observatoryLevel").value=config.observatoryLevel||0;document.getElementById("enhancingTea").checked=config.enhancingTea||false;document.getElementById("superEnhancingTea").checked=config.superEnhancingTea||false;document.getElementById("ultimateTea").checked=config.ultimateTea||false;document.getElementById("luckTea").checked=config.luckTea||false;document.getElementById("enhancerShirt").value=config.enhancerShirt||0;document.getElementById("enhancerPants").value=config.enhancerPants||0;document.getElementById("enhancerGloves").value=config.enhancerGloves||0;document.getElementById("speedNecklace").value=config.speedNecklace||0;document.getElementById("drinkConcentration").value=config.drinkConcentration||0;document.getElementById("enhancerBonus").value=config.enhancerBonus||0;document.getElementById("communityBuff").value=config.communityBuff||0;localStorage.setItem("lastUsedConfig",configName);alert("配置加载成功！")}catch(error){alert("加载失败: "+error.message)}}async loadSavedConfigs(){const configSelect=document.getElementById("configSelect");configSelect.innerHTML='<option value="">选择已保存的配置</option>';try{const configs=JSON.parse(localStorage.getItem("characterConfigs")||"{}");Object.keys(configs).forEach(configName=>{if(configName!=="_lastUsedConfig"){const option=document.createElement("option");option.value=configName;option.textContent=configName;configSelect.appendChild(option)}})}catch(error){console.error("加载配置列表失败:",error)}}autoLoadLastConfig(){const lastConfigName=localStorage.getItem("lastUsedConfig");if(lastConfigName){const configs=JSON.parse(localStorage.getItem("characterConfigs")||"{}");const config=configs[lastConfigName];if(config){document.getElementById("characterLevel").value=config.characterLevel||1;document.getElementById("observatoryLevel").value=config.observatoryLevel||0;document.getElementById("enhancingTea").checked=config.enhancingTea||false;document.getElementById("superEnhancingTea").checked=config.superEnhancingTea||false;document.getElementById("ultimateTea").checked=config.ultimateTea||false;document.getElementById("luckTea").checked=config.luckTea||false;document.getElementById("enhancerShirt").value=config.enhancerShirt||0;document.getElementById("enhancerPants").value=config.enhancerPants||0;document.getElementById("enhancerGloves").value=config.enhancerGloves||0;document.getElementById("speedNecklace").value=config.speedNecklace||0;document.getElementById("drinkConcentration").value=config.drinkConcentration||0;document.getElementById("enhancerBonus").value=config.enhancerBonus||0;document.getElementById("communityBuff").value=config.communityBuff||0;document.getElementById("configSelect").value=lastConfigName;console.log(`已自动加载配置: ${lastConfigName}`)}}}async loadSavedRecipes(){const recipeContainer=document.getElementById("recipeSelectContainer");const deleteButton=document.getElementById("deleteRecipe");deleteButton.disabled=true;try{this.recipes=JSON.parse(localStorage.getItem("enhanceRecipes")||"{}");const recipeOptions=[{value:"",text:"选择已保存的配方"}];Object.keys(this.recipes).forEach(recipeName=>{recipeOptions.push({value:recipeName,text:recipeName})});this.recipeSelect=new SearchableSelect(recipeContainer,{placeholder:"选择已保存的配方",searchPlaceholder:"搜索配方...",onChange:(value,text)=>{console.log("配方选择:",value,text);deleteButton.disabled=!value}});this.recipeSelect.setData(recipeOptions)}catch(error){console.error("加载配方列表失败:",error)}}loadRecipe(){const recipeName=this.recipeSelect?this.recipeSelect.getValue():"";if(!recipeName||!this.recipes[recipeName]){alert("请选择一个配方");return}const recipe=this.recipes[recipeName];if(this.targetItemSelect){this.targetItemSelect.setValue(recipe.targetItem||"")}if(this.protectionItemSelect){this.protectionItemSelect.setValue(recipe.protectionItem||"")}document.getElementById("targetLevel").value=recipe.targetLevel||1;document.getElementById("itemLevel").value=recipe.itemLevel!==undefined?recipe.itemLevel:50;document.getElementById("enhanceCost").value=recipe.enhanceCost||0;document.getElementById("materialsList").innerHTML="";this.materials=[];if(recipe.materials){recipe.materials.forEach(material=>{this.addMaterial();const lastIndex=this.materials.length-1;const materialItems=document.querySelectorAll(".material-item");const lastItem=materialItems[lastIndex];if(this.materials[lastIndex]&&this.materials[lastIndex].selectComponent){this.materials[lastIndex].selectComponent.setValue(material.item)}lastItem.querySelector(".material-quantity").value=material.quantity;lastItem.querySelector(".material-price").value=material.price;this.updateMaterialPrice(lastIndex,material.item)})}this.updateBonusAttributes();alert("配方加载成功！")}deleteRecipe(){const recipeName=this.recipeSelect?this.recipeSelect.getValue():"";if(!recipeName||!this.recipes[recipeName]){alert("请先选择要删除的配方");return}if(!confirm(`确定要删除配方 "${recipeName}" 吗？此操作无法撤销。`)){return}try{delete this.recipes[recipeName];localStorage.setItem("enhanceRecipes",JSON.stringify(this.recipes));this.loadSavedRecipes();alert("配方删除成功！")}catch(error){alert("删除失败: "+error.message)}}getItemLevel(itemName){if(!itemName||!this.marketData[itemName]){return 50}const levels=Object.keys(this.marketData[itemName]).map(l=>parseInt(l)).filter(l=>!isNaN(l));if(levels.length>0){const minLevel=Math.min(...levels);return Math.max(50,minLevel*10)}return 50}runSimulation(){if(typeof math==="undefined"){alert("数学库未加载，请刷新页面重试");return}const targetItemValue=this.targetItemSelect?this.targetItemSelect.getValue():"";if(!targetItemValue){alert("请选择要强化的物品");return}const targetItem=targetItemValue;const startLevel=0;const targetLevel=parseInt(document.getElementById("targetLevel").value);const itemLevel=parseInt(document.getElementById("itemLevel").value);if(targetLevel<=0){alert("目标等级必须大于0");return}if(itemLevel<=0){alert("物品等级必须大于0");return}const config=this.getCharacterConfig();const materials=this.getMaterialsData();const enhanceCost=parseFloat(document.getElementById("enhanceCost").value)||0;const protectionItem=this.protectionItemSelect?this.protectionItemSelect.getValue():"";const priceType=document.getElementById("enhancePriceType").value||"mixed";const allResults=[];for(let currentStartLevel=0;currentStartLevel<targetLevel;currentStartLevel++){let initialPrice=0;const initialPriceData=this.getItemPrice(targetItem,currentStartLevel.toString(),priceType);if(initialPriceData){if(priceType==="mixed"){initialPrice=initialPriceData.a!==-1?initialPriceData.a:0}else if(priceType==="ask"){initialPrice=initialPriceData.a!==-1?initialPriceData.a:0}else if(priceType==="bid"){initialPrice=initialPriceData.b!==-1?initialPriceData.b:0}}let sellItemPrice=0;if(this.marketData[targetItem]&&this.marketData[targetItem][targetLevel]){const priceData=this.marketData[targetItem][targetLevel];if(priceType==="mixed"){sellItemPrice=priceData.b!==-1?priceData.b:0}else if(priceType==="ask"){sellItemPrice=priceData.a!==-1?priceData.a:0}else if(priceType==="bid"){sellItemPrice=priceData.b!==-1?priceData.b:0}}if(initialPrice===0||sellItemPrice===0){continue}const results=this.calculateBestProtectionLevel(targetItem,currentStartLevel,targetLevel,config,materials,enhanceCost,protectionItem,itemLevel,sellItemPrice,priceType);results.startLevel=currentStartLevel;results.targetLevel=targetLevel;allResults.push(results)}this.displayAllResults(allResults)}calculateBestProtectionLevel(targetItem,startLevel,targetLevel,config,materials,enhanceCost,protectionItem,itemLevel,sellItemPrice=0,priceType="mixed"){let bestResults=null;let bestHourlyRate=-Infinity;let bestProtectionLevel=1;for(let protectionStartLevel=1;protectionStartLevel<=20;protectionStartLevel++){const results=this.calculateEnhancement(targetItem,startLevel,targetLevel,config,materials,enhanceCost,protectionItem,protectionStartLevel,itemLevel,sellItemPrice,priceType);if(results.hourlyCost>bestHourlyRate){bestHourlyRate=results.hourlyCost;bestResults=results;bestProtectionLevel=protectionStartLevel}}if(bestResults){bestResults.bestProtectionLevel=bestProtectionLevel}return bestResults}calculateEnhancement(targetItem,startLevel,targetLevel,config,materials,enhanceCost,protectionItem,protectionStartLevel,itemLevel,sellItemPrice=0,priceType="mixed"){const baseSuccessRates=[50,45,45,40,40,40,35,35,35,35,30,30,30,30,30,30,30,30,30,30];const enhanceLevelBonus=this.calculateEnhanceLevelBonus();const effectiveEnhancingLevel=config.characterLevel+enhanceLevelBonus;const successRateBonus=this.calculateSuccessRateBonus(itemLevel);const totalBonus=1+successRateBonus/100;let markov=math.zeros(20,20);for(let i=0;i<targetLevel;i++){const successChance=baseSuccessRates[i]/100*totalBonus;const destination=i>=protectionStartLevel?i-1:0;if(config.luckTea){const luckBonus=this.calculateLuckTriggerChance()/100;markov.set([i,Math.min(i+2,19)],successChance*luckBonus);markov.set([i,i+1],successChance*(1-luckBonus));markov.set([i,destination],1-successChance)}else{markov.set([i,i+1],successChance);markov.set([i,destination],1-successChance)}}markov.set([targetLevel,targetLevel],1);let Q=markov.subset(math.index(math.range(0,targetLevel),math.range(0,targetLevel)));const M=math.inv(math.subtract(math.identity(targetLevel),Q));const attemptsArray=M.subset(math.index(math.range(startLevel,startLevel+1),math.range(0,targetLevel)));const totalAttempts=math.sum(attemptsArray);let totalProtectionUses=0;if(protectionStartLevel<targetLevel){const protectAttempts=M.subset(math.index(math.range(0,1),math.range(protectionStartLevel,targetLevel)));const protectAttemptsArray=typeof protectAttempts==="number"?[protectAttempts]:math.flatten(math.row(protectAttempts,0).valueOf());totalProtectionUses=protectAttemptsArray.map((a,i)=>a*markov.get([i+protectionStartLevel,i+protectionStartLevel-1])).reduce((a,b)=>a+b,0)}const actionSpeedBonus=this.calculateActionSpeedBonus(itemLevel);const perActionTimeSec=12/(1+actionSpeedBonus/100);const perActionMaterialCost=materials.reduce((total,material)=>{return total+material.quantity*material.price},0);const totalMaterialCost=perActionMaterialCost*totalAttempts;const totalEnhanceCost=enhanceCost*totalAttempts;let protectionCost=0;if(protectionItem){const protectionPriceData=this.getItemPrice(protectionItem,"0",priceType);if(protectionPriceData){let protectionPrice=0;if(priceType==="mixed"||priceType==="ask"){protectionPrice=protectionPriceData.a!==-1?protectionPriceData.a:0}else if(priceType==="bid"){protectionPrice=protectionPriceData.b!==-1?protectionPriceData.b:0}if(protectionPrice>0){protectionCost=protectionPrice*totalProtectionUses}}}let initialItemCost=0;const initialPriceData=this.getItemPrice(targetItem,startLevel.toString(),priceType);if(initialPriceData){if(priceType==="mixed"){initialItemCost=initialPriceData.a!==-1?initialPriceData.a:0}else{initialItemCost=initialPriceData.a!==-1?initialPriceData.a:0}}const totalCost=initialItemCost+totalMaterialCost+totalEnhanceCost+protectionCost;const totalTime=totalAttempts*perActionTimeSec;const totalTimeStr=this.formatTime(totalTime);let finalItemValue=sellItemPrice;if(finalItemValue===0){const finalPriceData=this.getItemPrice(targetItem,targetLevel.toString(),priceType);if(finalPriceData){if(priceType==="mixed"){finalItemValue=finalPriceData.b!==-1?finalPriceData.b:0}else{finalItemValue=finalPriceData.a!==-1?finalPriceData.a:0}}}finalItemValue=finalItemValue*.98;const profit=finalItemValue-totalCost;const hourlyRate=profit/(totalTime/3600);return{bestProtectionLevel:protectionStartLevel,enhanceAttempts:totalAttempts,enhanceTime:totalTime,enhanceTimeStr:totalTimeStr,protectionUses:totalProtectionUses,totalCost:totalCost,hourlyCost:hourlyRate,initialItemPrice:initialItemCost,finalItemPrice:finalItemValue}}displayResults(results){document.getElementById("bestProtectionLevel").textContent=results.bestProtectionLevel;document.getElementById("enhanceAttempts").textContent=results.enhanceAttempts.toLocaleString();document.getElementById("enhanceTime").textContent=this.formatTime(results.enhanceTime);document.getElementById("protectionUses").textContent=results.protectionUses.toLocaleString();document.getElementById("totalCost").textContent=this.formatPrice(results.totalCost);document.getElementById("hourlyCost").textContent=this.formatHourlyRate(results.hourlyCost)+"/小时";document.getElementById("initialItemPrice").textContent=this.formatPrice(results.initialItemPrice);document.getElementById("finalItemPrice").textContent=this.formatPrice(results.finalItemPrice);document.getElementById("simulationResults").classList.remove("hidden")}displayAllResults(allResults){const resultsContainer=document.getElementById("simulationResults");let tableHTML=`
            <h3>强化模拟结果对比</h3>
            <div class="table-container">
                <table class="results-table" style="width: 100%; border-collapse: collapse; margin: 20px 0; font-size: 14px;">
                    <thead>
                        <tr style="background-color: #f5f5f5; border-bottom: 2px solid #ddd;">
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">起始等级</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">目标等级</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">最佳保护等级</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">强化次数</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">强化时间</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">保护使用次数</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">总成本</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">工时费</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">初始物品价格</th>
                            <th style="padding: 12px 8px; text-align: center; border: 1px solid #ddd; font-weight: bold;">最终物品价格</th>
                        </tr>
                    </thead>
                    <tbody>
        `;allResults.forEach((result,index)=>{const rowStyle=index%2===0?"background-color: #f9f9f9;":"background-color: #ffffff;";const hourlyRateStyle=result.hourlyCost<0?"color: #d32f2f; font-weight: bold;":"color: #2e7d32; font-weight: bold;";tableHTML+=`
                <tr style="${rowStyle} border-bottom: 1px solid #eee;">
                    <td style="padding: 10px 8px; text-align: center; border: 1px solid #ddd;">+${result.startLevel}</td>
                    <td style="padding: 10px 8px; text-align: center; border: 1px solid #ddd;">+${result.targetLevel}</td>
                    <td style="padding: 10px 8px; text-align: center; border: 1px solid #ddd;">+${result.bestProtectionLevel}</td>
                    <td style="padding: 10px 8px; text-align: right; border: 1px solid #ddd;">${result.enhanceAttempts.toLocaleString()}</td>
                    <td style="padding: 10px 8px; text-align: center; border: 1px solid #ddd;">${this.formatTime(result.enhanceTime)}</td>
                    <td style="padding: 10px 8px; text-align: right; border: 1px solid #ddd;">${result.protectionUses.toLocaleString()}</td>
                    <td style="padding: 10px 8px; text-align: right; border: 1px solid #ddd;">${this.formatPrice(result.totalCost)}</td>
                    <td style="padding: 10px 8px; text-align: right; border: 1px solid #ddd; ${hourlyRateStyle}">${this.formatHourlyRate(result.hourlyCost)}/小时</td>
                    <td style="padding: 10px 8px; text-align: right; border: 1px solid #ddd;">${this.formatPrice(result.initialItemPrice)}</td>
                    <td style="padding: 10px 8px; text-align: right; border: 1px solid #ddd;">${this.formatPrice(result.finalItemPrice)}</td>
                </tr>
            `});tableHTML+=`
                </tbody>
            </table>
        </div>
        `;resultsContainer.innerHTML=tableHTML;resultsContainer.classList.remove("hidden")}adjustTargetLevel(delta){const select=document.getElementById("targetLevelSelect");const currentValue=parseInt(select.value);const newValue=currentValue+delta;if(newValue>=2&&newValue<=20){select.value=newValue;this.updateLevelControlButtons()}}updateLevelControlButtons(){const select=document.getElementById("targetLevelSelect");const currentValue=parseInt(select.value);const decreaseBtn=document.getElementById("decreaseLevel");const increaseBtn=document.getElementById("increaseLevel");decreaseBtn.disabled=currentValue<=2;increaseBtn.disabled=currentValue>=20}formatTime(seconds){const hours=Math.floor(seconds/3600);const minutes=Math.floor(seconds%3600/60);const secs=Math.floor(seconds%60);if(hours>0){return`${hours}小时${minutes}分钟${secs}秒`}else if(minutes>0){return`${minutes}分钟${secs}秒`}else{return`${secs}秒`}}updateBonusAttributes(){const successRateBonus=this.calculateSuccessRateBonus();const actionSpeedBonus=this.calculateActionSpeedBonus();const enhanceLevelBonus=this.calculateEnhanceLevelBonus();const luckBonus=this.calculateLuckTriggerChance();document.getElementById("bonusSuccessRate").textContent=`+${successRateBonus.toFixed(2)}%`;document.getElementById("bonusActionSpeed").textContent=`+${actionSpeedBonus.toFixed(2)}%`;document.getElementById("bonusEnhanceLevel").textContent=`+${enhanceLevelBonus.toFixed(1)}`;document.getElementById("bonusLuck").textContent=`+${luckBonus.toFixed(2)}%`}calculateSuccessRateBonus(itemLevel=null){const config=this.getCharacterConfig();const actualItemLevel=itemLevel!==null?itemLevel:parseInt(document.getElementById("itemLevel").value)||0;const enhanceLevelBonus=this.calculateEnhanceLevelBonus();const effectiveCharacterLevel=config.characterLevel+enhanceLevelBonus;const levelBonus=Math.max(0,effectiveCharacterLevel-actualItemLevel)*.05;const observatoryBonus=config.observatoryLevel*.05;const enhancerBonus=config.enhancerBonus;return levelBonus+observatoryBonus+enhancerBonus}calculateActionSpeedBonus(itemLevel=null){const config=this.getCharacterConfig();const actualItemLevel=itemLevel!==null?itemLevel:parseInt(document.getElementById("itemLevel").value)||0;let bonus=0;bonus+=config.enhancerShirt;bonus+=config.enhancerPants;bonus+=config.enhancerGloves;bonus+=config.speedNecklace;bonus+=config.communityBuff;if(config.ultimateTea){const concentrationMultiplier=1+config.drinkConcentration/100;bonus+=6*concentrationMultiplier}const enhanceLevelBonus=this.calculateEnhanceLevelBonus();const effectiveCharacterLevel=config.characterLevel+enhanceLevelBonus;const levelSpeedBonus=Math.max(0,effectiveCharacterLevel-actualItemLevel);bonus+=levelSpeedBonus;bonus+=config.observatoryLevel;return bonus}calculateEnhanceLevelBonus(){const config=this.getCharacterConfig();let bonus=0;const concentrationMultiplier=1+config.drinkConcentration/100;if(config.enhancingTea)bonus+=3*concentrationMultiplier;if(config.superEnhancingTea)bonus+=6*concentrationMultiplier;if(config.ultimateTea)bonus+=8*concentrationMultiplier;return bonus}calculateLuckTriggerChance(){const config=this.getCharacterConfig();if(!config.luckTea)return 0;const concentrationMultiplier=1+config.drinkConcentration/100;const triggerChance=1*concentrationMultiplier;return triggerChance}showCustomPriceTab(){this.saveEnhanceState();document.getElementById("itemSelection").classList.add("hidden");document.getElementById("levelSelection").classList.add("hidden");document.getElementById("priceDisplay").classList.add("hidden");document.getElementById("enhanceSimulator").classList.add("hidden");document.getElementById("recipeRanking").classList.add("hidden");document.getElementById("customPriceConfig").classList.remove("hidden");document.querySelectorAll(".tab-btn").forEach(btn=>btn.classList.remove("active"));document.getElementById("customPriceTab").classList.add("active");this.loadSavedCustomPriceConfigs()}addCustomItem(){const customItemsList=document.getElementById("customItemsList");const index=customItemsList.children.length;const itemRow=document.createElement("div");itemRow.className="custom-item-row";itemRow.innerHTML=`
            <div class="custom-item-container" id="customItem${index}"></div>
            <input type="number" class="custom-level" placeholder="等级" min="0" max="20" value="0">
            <input type="number" class="custom-ask-price" placeholder="Ask价格" min="0" step="0.01">
            <input type="number" class="custom-bid-price" placeholder="Bid价格" min="0" step="0.01">
            <button class="btn btn-danger btn-small" onclick="simulator.removeCustomItem(${index})">删除</button>
        `;customItemsList.appendChild(itemRow);const container=document.getElementById(`customItem${index}`);const itemSelect=new SearchableSelect(container,{placeholder:"选择物品",searchPlaceholder:"搜索物品...",onChange:(value,text)=>{this.updateCustomItemPrice(index,value)}});if(this.marketData&&Object.keys(this.marketData).length>0){const itemOptions=Object.keys(this.marketData).map(itemName=>({value:itemName,text:this.formatItemName(itemName)}));itemSelect.setData(itemOptions)}this.updateCustomItemIndices()}removeCustomItem(index){const customItemsList=document.getElementById("customItemsList");const itemRow=customItemsList.children[index];if(itemRow){itemRow.remove();this.updateCustomItemIndices()}}updateCustomItemIndices(){const customItemsList=document.getElementById("customItemsList");Array.from(customItemsList.children).forEach((row,index)=>{const deleteBtn=row.querySelector(".btn-danger");if(deleteBtn){deleteBtn.onclick=()=>this.removeCustomItem(index)}})}updateCustomItemPrice(index,itemName){if(this.marketData[itemName]){const row=document.getElementById("customItemsList").children[index];const levelInput=row.querySelector(".custom-level");const askInput=row.querySelector(".custom-ask-price");const bidInput=row.querySelector(".custom-bid-price");const level=levelInput.value||"0";if(this.marketData[itemName][level]){const priceData=this.marketData[itemName][level];if(priceData.a&&priceData.a!==-1){askInput.value=priceData.a}if(priceData.b&&priceData.b!==-1){bidInput.value=priceData.b}}}}async saveCustomPriceConfig(){const configName=document.getElementById("customPriceConfigName").value.trim();if(!configName){alert("请输入配置名称");return}const customItems=this.getCustomPriceData();try{const configs=JSON.parse(localStorage.getItem("customPriceConfigs")||"{}");configs[configName]={name:configName,items:customItems,savedAt:(new Date).toISOString()};localStorage.setItem("customPriceConfigs",JSON.stringify(configs));this.customPriceConfigs=configs;this.updateCustomPriceConfigSelect();alert("自定义价格配置保存成功！");document.getElementById("customPriceConfigName").value=""}catch(error){console.error("保存自定义价格配置失败:",error);alert("保存失败，请重试")}}getCustomPriceData(){const customItemsList=document.getElementById("customItemsList");const items={};Array.from(customItemsList.children).forEach(row=>{const container=row.querySelector(".custom-item-container");const levelInput=row.querySelector(".custom-level");const askInput=row.querySelector(".custom-ask-price");const bidInput=row.querySelector(".custom-bid-price");const selectElement=container.querySelector(".searchable-select");if(selectElement){const selectedText=selectElement.querySelector(".select-text").textContent;if(selectedText&&selectedText!=="选择物品"){const itemName=this.getOriginalItemName(selectedText);const level=levelInput.value||"0";const askPrice=parseFloat(askInput.value)||0;const bidPrice=parseFloat(bidInput.value)||0;if(itemName&&(askPrice>0||bidPrice>0)){const itemKey=`${itemName}|${level}`;items[itemKey]={itemName:itemName,level:level,a:askPrice,b:bidPrice}}}}});return items}getOriginalItemName(displayName){for(const itemName in this.itemTranslations){if(this.itemTranslations[itemName]===displayName){return itemName}}return displayName.toLowerCase().replace(/ /g,"_")}async loadCustomPriceConfig(){const configSelect=document.getElementById("customPriceConfigSelect");const selectedConfig=configSelect.value;if(!selectedConfig){alert("请选择要加载的配置");return}try{const configs=JSON.parse(localStorage.getItem("customPriceConfigs")||"{}");const config=configs[selectedConfig];if(config){document.getElementById("customItemsList").innerHTML="";Object.values(config.items).forEach(item=>{this.addCustomItem();const lastRow=document.getElementById("customItemsList").lastElementChild;const container=lastRow.querySelector(".custom-item-container");const selectElement=container.querySelector(".searchable-select");if(selectElement){const textElement=selectElement.querySelector(".select-text");textElement.textContent=this.formatItemName(item.itemName)}lastRow.querySelector(".custom-level").value=item.level;lastRow.querySelector(".custom-ask-price").value=item.a;lastRow.querySelector(".custom-bid-price").value=item.b});alert('配置加载成功！请点击"应用价格"按钮来应用这些价格设置。')}}catch(error){console.error("加载自定义价格配置失败:",error);alert("加载失败，请重试")}}async deleteCustomPriceConfig(){const configSelect=document.getElementById("customPriceConfigSelect");const selectedConfig=configSelect.value;if(!selectedConfig){alert("请选择要删除的配置");return}if(!confirm(`确定要删除配置 "${selectedConfig}" 吗？`)){return}try{const configs=JSON.parse(localStorage.getItem("customPriceConfigs")||"{}");delete configs[selectedConfig];localStorage.setItem("customPriceConfigs",JSON.stringify(configs));this.customPriceConfigs=configs;this.updateCustomPriceConfigSelect();alert("配置删除成功！")}catch(error){console.error("删除自定义价格配置失败:",error);alert("删除失败，请重试")}}async loadSavedCustomPriceConfigs(){try{const configs=JSON.parse(localStorage.getItem("customPriceConfigs")||"{}");this.customPriceConfigs=configs;this.updateCustomPriceConfigSelect()}catch(error){console.error("加载自定义价格配置失败:",error)}}updateCustomPriceConfigSelect(){const select=document.getElementById("customPriceConfigSelect");select.innerHTML='<option value="">选择已保存的配置</option>';Object.keys(this.customPriceConfigs).forEach(configName=>{const option=document.createElement("option");option.value=configName;option.textContent=configName;select.appendChild(option)})}applyCustomPrices(){this.currentCustomPrices=this.getCustomPriceData();const count=Object.keys(this.currentCustomPrices).length;alert(`已应用 ${count} 个自定义价格设置`);console.log("当前自定义价格:",this.currentCustomPrices)}cancelCustomPrices(){this.currentCustomPrices={};alert("已取消应用自定义价格，现在将使用市场数据价格");console.log("已清空自定义价格，恢复使用市场数据")}getItemPrice(itemName,level="0",priceType="mixed"){const itemKey=`${itemName}|${level}`;if(this.currentCustomPrices[itemKey]){return this.currentCustomPrices[itemKey]}if(this.marketData[itemName]&&this.marketData[itemName][level]){const priceData=this.marketData[itemName][level];if(priceType==="ask"){return{a:priceData.a,b:priceData.a}}else if(priceType==="bid"){return{a:priceData.b,b:priceData.b}}else{return priceData}}return null}saveEnhanceState(){const state={targetItem:this.savedTargetItem,protectionItem:this.savedProtectionItem,targetLevel:document.getElementById("targetLevel")?.value,itemLevel:document.getElementById("itemLevel")?.value,enhanceCost:document.getElementById("enhanceCost")?.value};try{localStorage.setItem("enhanceSimulatorState",JSON.stringify(state))}catch(error){console.warn("无法保存强化模拟器状态:",error)}}restoreEnhanceState(){try{const savedState=localStorage.getItem("enhanceSimulatorState");if(!savedState)return;const state=JSON.parse(savedState);if(state.targetItem&&this.targetItemSelect){this.targetItemSelect.setValue(state.targetItem);this.savedTargetItem=state.targetItem}if(state.protectionItem&&this.protectionItemSelect){this.protectionItemSelect.setValue(state.protectionItem);this.savedProtectionItem=state.protectionItem}if(state.targetLevel){const targetLevelInput=document.getElementById("targetLevel");if(targetLevelInput)targetLevelInput.value=state.targetLevel}if(state.itemLevel){const itemLevelInput=document.getElementById("itemLevel");if(itemLevelInput)itemLevelInput.value=state.itemLevel}if(state.enhanceCost){const enhanceCostInput=document.getElementById("enhanceCost");if(enhanceCostInput)enhanceCostInput.value=state.enhanceCost}console.log("已恢复强化模拟器状态:",state)}catch(error){console.warn("无法恢复强化模拟器状态:",error)}}exportConfigs(){try{const allConfigs={recipes:JSON.parse(localStorage.getItem("enhanceRecipes")||"{}"),characterConfigs:JSON.parse(localStorage.getItem("characterConfigs")||"{}"),customPriceConfigs:JSON.parse(localStorage.getItem("customPriceConfigs")||"{}"),lastUsedConfig:localStorage.getItem("lastUsedConfig"),enhanceSimulatorState:JSON.parse(localStorage.getItem("enhanceSimulatorState")||"{}"),exportTime:(new Date).toISOString(),version:"1.1"};const dataStr=JSON.stringify(allConfigs,null,2);const dataBlob=new Blob([dataStr],{type:"application/json"});const link=document.createElement("a");link.href=URL.createObjectURL(dataBlob);link.download=`强化模拟器配置_${(new Date).toISOString().split("T")[0]}.json`;link.click();alert("配置导出成功！")}catch(error){alert("导出失败: "+error.message)}}importConfigs(){const input=document.createElement("input");input.type="file";input.accept=".json";input.onchange=e=>{const file=e.target.files[0];if(!file)return;const reader=new FileReader;reader.onload=e=>{try{const configs=JSON.parse(e.target.result);if(!configs.version&&!configs.recipes){if(!confirm("这可能不是有效的配置文件，是否继续导入？")){return}}if(configs.recipes){let validRecipes={};let importedCount=0;Object.keys(configs.recipes).forEach(recipeName=>{const recipe=configs.recipes[recipeName];if(recipe.targetItem&&recipe.targetLevel&&recipe.materials){validRecipes[recipeName]=recipe;importedCount++}else{console.warn(`配方 "${recipeName}" 格式不完整，已跳过`)}});if(importedCount>0){localStorage.setItem("enhanceRecipes",JSON.stringify(validRecipes));this.recipes=validRecipes;this.loadSavedRecipes();alert(`配方导入成功！共导入 ${importedCount} 个配方。`)}else{alert("没有找到有效的配方数据！")}}else{alert("配置文件中没有找到配方数据！")}}catch(error){alert("导入失败，请检查文件格式: "+error.message)}};reader.readAsText(file)};input.click()}exportRanking(){const rankingTable=document.getElementById("rankingTable");if(!rankingTable.innerHTML||rankingTable.innerHTML.trim()===""){alert("请先生成排行榜数据");return}if(!this.currentRankingData){alert("没有可导出的排行榜数据");return}const targetLevel=parseInt(document.getElementById("targetLevelSelect").value);const timestamp=(new Date).toISOString().replace(/[:.]/g,"-").slice(0,-5);const filename=`配方工时费排行榜_目标等级+${targetLevel}_${timestamp}.csv`;let csvContent="\ufeff";csvContent+='"注意：此排行榜使用当前页面的角色配置进行计算"\n';csvContent+="\n";const headers=["排名","配方名称","目标物品","目标等级","最高工时费","最高工时费等级"];if(this.currentRankingData.length>0){for(let i=0;i<this.currentRankingData[0].levelResults.length;i++){headers.push(`+${i}等级工时费`)}}csvContent+=headers.join(",")+"\n";this.currentRankingData.forEach((item,index)=>{const row=[index+1,`"${item.recipeName}"`,`"${this.formatItemName(item.recipe.targetItem)}"`,`+${item.actualTargetLevel||item.recipe.targetLevel}`,this.formatHourlyRateForExport(item.maxHourlyRate),`+${item.maxHourlyRateLevel}`];item.levelResults.forEach(result=>{row.push(this.formatHourlyRateForExport(result.hourlyRate))});csvContent+=row.join(",")+"\n"});const blob=new Blob([csvContent],{type:"text/csv;charset=utf-8;"});const link=document.createElement("a");if(link.download!==undefined){const url=URL.createObjectURL(blob);link.setAttribute("href",url);link.setAttribute("download",filename);link.style.visibility="hidden";document.body.appendChild(link);link.click();document.body.removeChild(link);alert(`排行榜已导出为: ${filename}`)}else{alert("您的浏览器不支持文件下载功能")}}formatHourlyRateForExport(rate){if(rate===null||rate===undefined||rate===-Infinity){return"无法计算"}if(rate>=0){return rate.toFixed(2)}else{return rate.toFixed(2)}}}let simulator;document.addEventListener("DOMContentLoaded",()=>{simulator=new EnhancementSimulator});